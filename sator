#!/usr/bin/env python

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

import sys
import os
import time

def usage():
    print "sator reverse SSH manager...\n"

    print "Set your configuration in ~/.satorrc\n"

    print "Run without options to set up a stubbed configuration file.\n"

    print "sator can be run in the following modes:"
    print "   sator serve - As a server (should not be run except by the sator"
    print "                 client script)\n"

    print "  sator client - As a client. This is the mode you will probably want"
    print "                 to run sator. This reads the configuration and sets"
    print "                 up the reverse SSH connections into the machine the"
    print "                 client is running from."

class SatorConfig(object):
    '''
    Very basic config object for sator
    '''
    def __init__(self):
        # Weeee! Hardcoded hackery!
        self._config_filename = ".satorrc"
        self.C = configparser.SafeConfigParser()
        self._load_config()

    def _load_config(self):
        '''
        Loads the configuration file, or creates a blank one if none exists
        '''
        user_config = "%s/%s" % (os.path.expanduser("~"), self._config_filename)
        if os.path.isfile(user_config):
            # Attempt to load it
            try:
                self.C.readfp(open(user_config))
                # Check for needed sections
            except (configparser.MissingSectionHeaderError,
                    configparser.ParsingError):
                # Our config file is fubar, we'll nuke it after backing it up
                backup_config = "%s.backup-%i" % (user_config % int(time.time()))
                os.rename(user_config, backup_config)
                _create_config()
        else:
            # Okay, we just create it
            _create_config()

    def _create_config(self):
        '''
        Creates a default config file
        '''
        if(!self.C.has_section('remote')):
            self.C.add_section('remote')

        if(!self.C.has_section('local')):
            self.C.add_section('local')

        if(!self.C.has_option('remote', 'port_range_low')):
            self.C.set('remote', 'port_range_low', 19999)
            self.C.set('remote', 'port_range_end', 29999)

if __name__ == "__main__":
    # We must be run from the command line
    argv = sys.argv[1:]
    if "serve" in argv:
        print "Foo"
    elif "client" in argv:
        print "Baz"
    else:
        usage()
