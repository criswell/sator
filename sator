#!/usr/bin/env python

import os
import sys

from satorlib.config import SatorConfig
from satorlib.local import local
from satorlib.remote import remote

def usage():
    print "sator reverse SSH manager...\n"

    print "Set your configuration in ~/.sator/satorrc\n"

    print "Run without options to set up a stubbed configuration file.\n"

    print "sator can be run in the following modes:"
    print "   sator local - Run this mode on the machine (or machines) behind the"
    print "                 NAT or firewalls which are restricting your access to"
    print "                 them.\n"

    print "  sator remote - The remote mode should not be ran manually. It will"
    print "                 be ran by the sator script on the remote machine(s).\n"

    print "Commands for local:\n"

    print " sator local ls"
    print "                 Lists the current states of the connections that sator"
    print "                 is configured to handle.\n"

    print " sator local start [connection] [...]"
    print "                 Start connection(s). If run with no options, will start"
    print "                 all connections that sator is configured to manage."
    print "                 Otherwise, supply a list of the connections you wish to"
    print "                 start by machine ID.\n"

    print " sator local shutdown [connection] [...]"
    print "                 Shutdown existing connection(s). If run with no"
    print "                 options, will shutdown all connections. Otherwise, you"
    print "                 must supply the connection(s) by machine ID you wish to"
    print "                 shutdown.\n"

if __name__ == "__main__":
    # We must be run from the command line
    argv = sys.argv[1:]
    root = "%s/.sator" % (os.path.expanduser("~"))
    config = SatorConfig(root)
    if "local" in argv:
        local(config, root, argv[1:])
    elif "remote" in argv:
        remote(config, root, argv[1:])
    else:
        usage()
